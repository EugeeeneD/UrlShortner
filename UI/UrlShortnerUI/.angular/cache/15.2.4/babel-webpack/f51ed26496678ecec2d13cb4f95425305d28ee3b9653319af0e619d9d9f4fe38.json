{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"https://localhost:7026/urls/\";\n    this.headers = new HttpHeaders().set('Access-Control-Request-Method', 'POST');\n    this.options = {\n      withCredentials: true\n    };\n    this._refresh$ = new Subject();\n  }\n  get Refresh$() {\n    return this._refresh$;\n  }\n  getShortenedUrls() {\n    return this.http.get(this.baseUrl);\n  }\n  deleteShortenedUrl(id) {\n    console.log(id);\n    return this.http.delete(this.baseUrl + id);\n  }\n  getShortenedUrl(id) {\n    return this.http.get(this.baseUrl + id);\n  }\n  addUrl(urlToAdd) {\n    this.http.post(this.baseUrl, urlToAdd).pipe(tap({\n      next: () => {\n        console.log(1);\n        this._refresh$.next();\n      },\n      error: e => {\n        console.log('error');\n      }\n    })).subscribe(res => {\n      console.log(res);\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAgCA,WAAW,QAAQ,sBAAsB;AAGzE,SAAqBC,OAAO,EAAEC,GAAG,QAAQ,MAAM;;;AAK/C,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAW,8BAA8B;IAIxD,YAAO,GAAG,IAAIL,WAAW,EAAE,CAACM,GAAG,CAAC,+BAA+B,EAAE,MAAM,CAAC;IACxE,YAAO,GAAG;MAAEC,eAAe,EAAE;IAAI,CAAE;IAE3B,cAAS,GAAG,IAAIN,OAAa;EALG;EAOxC,IAAIO,QAAQ;IACV,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,gBAAgB;IACd,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAkB,IAAI,CAACC,OAAO,CAAC;EACrD;EAEAC,kBAAkB,CAACC,EAAM;IACvBC,OAAO,CAACC,GAAG,CAACF,EAAE,CAAC;IACf,OAAO,IAAI,CAACT,IAAI,CAACY,MAAM,CAAC,IAAI,CAACL,OAAO,GAACE,EAAE,CAAC;EAC1C;EAEAI,eAAe,CAACJ,EAAS;IACvB,OAAO,IAAI,CAACT,IAAI,CAACM,GAAG,CAAgB,IAAI,CAACC,OAAO,GAACE,EAAE,CAAC;EACtD;EAEAK,MAAM,CAACC,QAAa;IAClB,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAM,IAAI,CAACT,OAAO,EAAEQ,QAAQ,CAAC,CAACE,IAAI,CAACpB,GAAG,CAAC;MACjDqB,IAAI,EAAE,MAAK;QACTR,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;QACd,IAAI,CAACP,SAAS,CAACc,IAAI,EAAE;MACvB,CAAC;MACDC,KAAK,EAAGC,CAAC,IAAI;QACXV,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACtB;KACD,CAAC,CACD,CAACU,SAAS,CAAEC,GAAG,IAAI;MACpBZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;IAClB,CAAC,CAAC;EACJ;;AAxCWxB,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAyB,SAAVzB,UAAU;EAAA0B,YAFT;AAAM","names":["HttpHeaders","Subject","tap","ApiService","constructor","http","set","withCredentials","Refresh$","_refresh$","getShortenedUrls","get","baseUrl","deleteShortenedUrl","id","console","log","delete","getShortenedUrl","addUrl","urlToAdd","post","pipe","next","error","e","subscribe","res","factory","providedIn"],"sourceRoot":"","sources":["F:\\UrlShortnerApi\\UI\\UrlShortnerUI\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { HttpClient, HttpEvent, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ShortenedUrls } from '../models/ShortenedUrl';\nimport { Observable, Subject, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private baseUrl: string = \"https://localhost:7026/urls/\";\n  \n  constructor(private http: HttpClient) { }\n\n  headers = new HttpHeaders().set('Access-Control-Request-Method', 'POST');\n  options = { withCredentials: true };\n\n  private _refresh$ = new Subject<void>;\n\n  get Refresh$(){\n    return this._refresh$;\n  }\n  \n  getShortenedUrls(): Observable<ShortenedUrls[]>{\n    return this.http.get<ShortenedUrls[]>(this.baseUrl);\n  }\n\n  deleteShortenedUrl(id:any){\n    console.log(id)\n    return this.http.delete(this.baseUrl+id);\n  }\n\n  getShortenedUrl(id:string){\n    return this.http.get<ShortenedUrls>(this.baseUrl+id);\n  }\n\n  addUrl(urlToAdd: any){\n    this.http.post<any>(this.baseUrl, urlToAdd).pipe(tap({\n        next: () => {\n          console.log(1)\n          this._refresh$.next();\n        },\n        error: (e) => {\n          console.log('error');\n        }\n      })\n      ).subscribe((res) => {\n      console.log(res)\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}