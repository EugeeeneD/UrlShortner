{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class ApiService {\n  constructor(http, toast) {\n    this.http = http;\n    this.toast = toast;\n    this.baseUrl = \"https://localhost:7026/urls/\";\n    this.headers = new HttpHeaders().set('Access-Control-Request-Method', 'POST');\n    this.options = {\n      withCredentials: true\n    };\n    this._refresh$ = new Subject();\n  }\n  get Refresh$() {\n    return this._refresh$;\n  }\n  getShortenedUrls() {\n    return this.http.get(this.baseUrl);\n  }\n  deleteShortenedUrl(shortenedUrl) {\n    return this.http.delete(this.baseUrl + shortenedUrl.id).pipe(tap({\n      next: () => {\n        this._refresh$.next();\n      },\n      error: e => {\n        if (e.status === 405) {\n          this.toast.error(\"Url already shortened.\");\n        } else {\n          this.toast.error(e.message);\n        }\n      }\n    })).subscribe(res => {\n      console.log(res);\n    });\n  }\n  getShortenedUrl(id) {\n    return this.http.get(this.baseUrl + id);\n  }\n  addUrl(urlToAdd) {\n    this.http.post(this.baseUrl, urlToAdd).pipe(tap({\n      next: () => {\n        console.log(1);\n        this._refresh$.next();\n      },\n      error: e => {\n        if (e.status === 405) {\n          this.toast.error(\"Url already shortened.\");\n        } else {\n          this.toast.error(e.message);\n        }\n      }\n    })).subscribe(res => {\n      console.log(res);\n    });\n  }\n  getUrlInfo(id) {\n    return this.http.get(this.baseUrl + id);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAmDA,WAAW,QAAQ,sBAAsB;AAG5F,SAAqBC,OAAO,EAAEC,GAAG,QAAQ,MAAM;;;;AAM/C,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB,EAAUC,KAAmB;IAA7C,SAAI,GAAJD,IAAI;IAAsB,UAAK,GAALC,KAAK;IAF3C,YAAO,GAAW,8BAA8B;IAIxD,YAAO,GAAG,IAAIN,WAAW,EAAE,CAACO,GAAG,CAAC,+BAA+B,EAAE,MAAM,CAAC;IACxE,YAAO,GAAG;MAAEC,eAAe,EAAE;IAAI,CAAE;IAE3B,cAAS,GAAG,IAAIP,OAAa;EALgC;EAOrE,IAAIQ,QAAQ;IACV,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,gBAAgB;IACd,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAkB,IAAI,CAACC,OAAO,CAAC;EACrD;EAEAC,kBAAkB,CAACC,YAAgB;IACjC,OAAO,IAAI,CAACV,IAAI,CAACW,MAAM,CAAC,IAAI,CAACH,OAAO,GAACE,YAAY,CAACE,EAAE,CAAC,CAACC,IAAI,CAAChB,GAAG,CAAC;MAC7DiB,IAAI,EAAE,MAAK;QACT,IAAI,CAACT,SAAS,CAACS,IAAI,EAAE;MACvB,CAAC;MACDC,KAAK,EAAGC,CAAoB,IAAI;QAC9B,IAAIA,CAAC,CAACC,MAAM,KAAK,GAAG,EACpB;UACE,IAAI,CAAChB,KAAK,CAACc,KAAK,CAAC,wBAAwB,CAAC;SAC3C,MAAK;UACJ,IAAI,CAACd,KAAK,CAACc,KAAK,CAACC,CAAC,CAACE,OAAO,CAAC;;MAE/B;KACD,CAAC,CACD,CAACC,SAAS,CAAEC,GAAG,IAAI;MACpBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CAAC;EACF;EAEAG,eAAe,CAACX,EAAS;IACvB,OAAO,IAAI,CAACZ,IAAI,CAACO,GAAG,CAAgB,IAAI,CAACC,OAAO,GAACI,EAAE,CAAC;EACtD;EAEAY,MAAM,CAACC,QAAY;IACjB,IAAI,CAACzB,IAAI,CAAC0B,IAAI,CAAM,IAAI,CAAClB,OAAO,EAAEiB,QAAQ,CAAC,CAACZ,IAAI,CAAChB,GAAG,CAAC;MACjDiB,IAAI,EAAE,MAAK;QACTO,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;QACd,IAAI,CAACjB,SAAS,CAACS,IAAI,EAAE;MACvB,CAAC;MACDC,KAAK,EAAGC,CAAoB,IAAI;QAC9B,IAAIA,CAAC,CAACC,MAAM,KAAK,GAAG,EACpB;UACE,IAAI,CAAChB,KAAK,CAACc,KAAK,CAAC,wBAAwB,CAAC;SAC3C,MAAK;UACJ,IAAI,CAACd,KAAK,CAACc,KAAK,CAACC,CAAC,CAACE,OAAO,CAAC;;MAE/B;KACD,CAAC,CACD,CAACC,SAAS,CAAEC,GAAG,IAAI;MACpBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CAAC;EACJ;EAEAO,UAAU,CAACf,EAAS;IAClB,OAAO,IAAI,CAACZ,IAAI,CAACO,GAAG,CAAC,IAAI,CAACC,OAAO,GAACI,EAAE,CAAC;EACvC;;AA/DWd,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAA8B,SAAV9B,UAAU;EAAA+B,YAFT;AAAM","names":["HttpHeaders","Subject","tap","ApiService","constructor","http","toast","set","withCredentials","Refresh$","_refresh$","getShortenedUrls","get","baseUrl","deleteShortenedUrl","shortenedUrl","delete","id","pipe","next","error","e","status","message","subscribe","res","console","log","getShortenedUrl","addUrl","urlToAdd","post","getUrlInfo","factory","providedIn"],"sourceRoot":"","sources":["F:\\UrlShortnerApi\\UI\\UrlShortnerUI\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpEvent, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ShortenedUrls } from '../models/ShortenedUrl';\nimport { Observable, Subject, tap } from 'rxjs';\nimport { Toast, ToastrModule, ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private baseUrl: string = \"https://localhost:7026/urls/\";\n  \n  constructor(private http: HttpClient, private toast:ToastrService) { }\n\n  headers = new HttpHeaders().set('Access-Control-Request-Method', 'POST');\n  options = { withCredentials: true };\n\n  private _refresh$ = new Subject<void>;\n\n  get Refresh$(){\n    return this._refresh$;\n  }\n  \n  getShortenedUrls(): Observable<ShortenedUrls[]>{\n    return this.http.get<ShortenedUrls[]>(this.baseUrl);\n  }\n\n  deleteShortenedUrl(shortenedUrl:any){\n    return this.http.delete(this.baseUrl+shortenedUrl.id).pipe(tap({\n      next: () => {\n        this._refresh$.next();\n      },\n      error: (e: HttpErrorResponse) => {\n        if (e.status === 405)\n        {\n          this.toast.error(\"Url already shortened.\");\n        } else{\n          this.toast.error(e.message);\n        }\n      }\n    })\n    ).subscribe((res) => {\n    console.log(res)\n  });\n  }\n\n  getShortenedUrl(id:string){\n    return this.http.get<ShortenedUrls>(this.baseUrl+id);\n  }\n\n  addUrl(urlToAdd:any){\n    this.http.post<any>(this.baseUrl, urlToAdd).pipe(tap({\n        next: () => {\n          console.log(1)\n          this._refresh$.next();\n        },\n        error: (e: HttpErrorResponse) => {\n          if (e.status === 405)\n          {\n            this.toast.error(\"Url already shortened.\");\n          } else{\n            this.toast.error(e.message);\n          }\n        }\n      })\n      ).subscribe((res) => {\n      console.log(res)\n    });\n  }\n\n  getUrlInfo(id:string){\n    return this.http.get(this.baseUrl+id);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}