{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs';\nlet TokenInterceptor = class TokenInterceptor {\n  constructor(auth, toast) {\n    this.auth = auth;\n    this.toast = toast;\n  }\n  intercept(request, next) {\n    const token = this.auth.getToken();\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(e => {\n      if (e instanceof HttpErrorResponse) {\n        if (e.status === 401) {}\n      }\n    }));\n  }\n};\nTokenInterceptor = __decorate([Injectable()], TokenInterceptor);\nexport { TokenInterceptor };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAKEC,iBAAiB,QACZ,sBAAsB;AAC7B,SAAqBC,UAAU,QAAQ,MAAM;AAItC,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAE3BC,YAAoBC,IAAiB,EAAUC,KAAoB;IAA/C,SAAI,GAAJD,IAAI;IAAuB,UAAK,GAALC,KAAK;EAAkB;EAEtEC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACL,IAAI,CAACM,QAAQ,EAAE;IAElC,IAAID,KAAK,EAAC;MACRF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UAACC,aAAa,EAAE,UAAUJ,KAAK;QAAE;OAC9C,CAAC;;IAGJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9Bd,UAAU,CAAEe,CAAC,IAAI;MACf,IAAIA,CAAC,YAAYhB,iBAAiB,EAClC;QACE,IAAIgB,CAAC,CAACC,MAAM,KAAK,GAAG,EACpB;;IAIJ,CAAC,CAAC,CACH;EACH;CACD;AAzBYf,gBAAgB,eAD5BH,UAAU,EAAE,GACAG,gBAAgB,CAyB5B;SAzBYA,gBAAgB","names":["Injectable","HttpErrorResponse","catchError","TokenInterceptor","constructor","auth","toast","intercept","request","next","token","getToken","clone","setHeaders","Authorization","handle","pipe","e","status"],"sourceRoot":"","sources":["F:\\UrlShortnerApi\\UI\\UrlShortnerUI\\src\\app\\interceptors\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private auth: AuthService, private toast: ToastrService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = this.auth.getToken();\n\n    if (token){\n      request = request.clone({\n        setHeaders: {Authorization: `Bearer ${token}`}\n      });\n    }\n\n    return next.handle(request).pipe(\n      catchError((e) => {\n        if (e instanceof HttpErrorResponse)\n        {\n          if (e.status === 401)\n          {\n\n          }\n        }\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}