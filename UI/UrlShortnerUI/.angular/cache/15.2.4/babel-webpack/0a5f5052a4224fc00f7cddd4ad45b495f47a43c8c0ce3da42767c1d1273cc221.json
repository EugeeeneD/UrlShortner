{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nexport class TokenInterceptor {\n  constructor(auth, toast, router) {\n    this.auth = auth;\n    this.toast = toast;\n    this.router = router;\n  }\n  intercept(request, next) {\n    const token = this.auth.getToken();\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        },\n        withCredentials: true\n      });\n    }\n    return next.handle(request).pipe(catchError(e => {\n      if (e instanceof HttpErrorResponse) {\n        if (e.status === 401) {\n          this.toast.warning(\"Check credentials and try again\", \"Warning\");\n          this.router.navigate(['login']);\n        } else if (e.status === 405) {\n          this.toast.error(\"Object already exist.\");\n        }\n      }\n      return throwError(() => new Error(\"Error occured.\"));\n    }));\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAKEA,iBAAiB,QACZ,sBAAsB;AAC7B,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;;AAMzD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAiB,EAAUC,KAAoB,EAAUC,MAAc;IAAvE,SAAI,GAAJF,IAAI;IAAuB,UAAK,GAALC,KAAK;IAAyB,WAAM,GAANC,MAAM;EAAW;EAE9FC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACN,IAAI,CAACO,QAAQ,EAAE;IAElC,IAAID,KAAK,EAAC;MACRF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UAACC,aAAa,EAAE,UAAUJ,KAAK;QAAE,CAAC;QAC9CK,eAAe,EAAE;OAClB,CAAC;;IAGJ,OAAON,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAACS,IAAI,CAC9BjB,UAAU,CAAEkB,CAAoB,IAAI;MAClC,IAAIA,CAAC,YAAYnB,iBAAiB,EAClC;QACE,IAAImB,CAAC,CAACC,MAAM,KAAK,GAAG,EACpB;UACE,IAAI,CAACd,KAAK,CAACe,OAAO,CAAC,iCAAiC,EAAE,SAAS,CAAC;UAChE,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;SAChC,MAAK,IAAIH,CAAC,CAACC,MAAM,KAAK,GAAG,EAC1B;UACE,IAAI,CAACd,KAAK,CAACiB,KAAK,CAAC,uBAAuB,CAAC;;;MAG7C,OAAOrB,UAAU,CAAC,MAAM,IAAIsB,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACtD,CAAC,CAAC,CACH;EACH;;AA9BWrB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAsB,SAAhBtB,gBAAgB;AAAA","names":["HttpErrorResponse","catchError","throwError","TokenInterceptor","constructor","auth","toast","router","intercept","request","next","token","getToken","clone","setHeaders","Authorization","withCredentials","handle","pipe","e","status","warning","navigate","error","Error","factory"],"sourceRoot":"","sources":["F:\\UrlShortnerApi\\UI\\UrlShortnerUI\\src\\app\\interceptors\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private auth: AuthService, private toast: ToastrService, private router: Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = this.auth.getToken();\n\n    if (token){\n      request = request.clone({\n        setHeaders: {Authorization: `Bearer ${token}`},\n        withCredentials: true\n      });\n    }\n\n    return next.handle(request).pipe(\n      catchError((e: HttpErrorResponse) => {\n        if (e instanceof HttpErrorResponse)\n        {\n          if (e.status === 401)\n          {\n            this.toast.warning(\"Check credentials and try again\", \"Warning\");\n            this.router.navigate(['login']);\n          }else if (e.status === 405)\n          {\n            this.toast.error(\"Object already exist.\");\n          }\n        }\n        return throwError(() => new Error(\"Error occured.\"));\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}